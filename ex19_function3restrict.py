# 0、程序的输出
def next():
    print("next()")
    pre()
def pre():
    print("pre()")
next()



# 1、下面函数是否有返回值
def hello():
    print("hello!")
print(hello())
# 即使没有设置return，Python也会默认返回None对象，即python任何函数都有返回值



# 2、python的return语句可以返回多个不同类型的值吗？
def list():
    return "hello",2,5,'?',True
print(list())
# 可以，python会默认，隔开的值以元组的形式返回


# 3、打印什么内容？
def pp(x):
    x = 1314
    print(x)
x = 1526
pp(x)
print(x)
#
# 1314
# 1526



# 4、目测打印什么内容
def fun1():
    global vars
    var = 'baby '
    return fun2(var)
def fun2(var):
    var += 'i love you'
    fun3(var)
    return var
def fun3(var):
    var = 'hello'

print(fun1())


# 1 a) 代码可读性变差
# 2 b) 代码安全性降低
# 以下关于全局变量的危言耸听是转来的，大家不妨也看下：
#
# 1.它会造成不必要的常量频繁使用，特别当这个常量没有用宏定义“正名”时，
# 代码阅读起来将万分吃力。
#
# 2.它会导致软件分层的不合理，全局变量相当于一条快捷通道，它容易使程序员模糊了
# “设备层”和“应用层”之间的边界。写出来的底层程序容易自作多情地关注起上层的应用。
# 这在软件系统的构建初期的确效率很高，功能调试进度一日千里，但到了后期往往bug一堆，处处“补丁”，雷区遍布。说是度日如年举步维艰也不为过。
#
# 3.由于软件的分层不合理，到了后期维护，哪怕仅是增加修改删除小功能，
# 往往要从上到下掘地三尺地修改，涉及大多数模块，而原有的代码注释却忘了更新修改，
# 这个时候，交给后来维护者的系统会越来越像一个“泥潭”，注释的唯一作用只是
# 使泥潭上方再加一些迷烟瘴气。
#
# 4.全局变量大量使用，少不了有些变量流连忘返于中断与主回圈程序之间。
# 这个时候如果处理不当，系统的bug就是随机出现的，无规律的，
# 这时候初步显示出病入膏肓的特征来了，没有大牛来力挽狂澜，注定慢性死亡。
#
# 5.无需多言，如果您的系统中大量使用全局变量，那么您已经成功得到一个畸形的系统，
# 它处于一个神秘的稳定状态！你看着这台机器，机器也看着你，相对无言，
# 心中发毛。你不确定它什么时候会崩溃，也不晓得下一次投诉什么时候道理。


# 0. 编写一个函数，判断传入的字符串参数是否为“回文联”
#
def couplet(str):
    str_len = len(str)
    flag = True
    for i in range(str_len//2):
        if (str[i] != str[-i-1]):
            print(str,"不是回文联")
            return
    print(str,"是回文联")
couplet("上海自来水来自海上")

# str1 = reversed(str) # 方案二 反转
# 1. 编写一个函数，分别统计出传入字符串参数（可能不只一个参数）的英文字母、空格、
# 数字和其它字符的个数。
def num(*param):
    for j in param:
        digit = 0
        alpha = 0
        space = 0
        for i in j:
            if(i.isdigit()):
                digit += 1
            if(i.isalpha()):
                alpha += 1
            if(i.isspace()):
                space += 1
        print(j,"字符串:",digit,alpha,space)
num("hello this is 2 number","3 number","one ")

#
# （1）函数与过程
#
# 很多编程语言会把函数和过程分开，有返回值的叫函数，过程是简单、特殊并且没有返回值的。但是在Python中，严格来讲，只有函数没有过程。
#
# 就算函数中没有return，Python中的函数也是会返回一些东西的。
#
#
#
# 就算hello()这个函数没有写return语句，Python也并不是什么都不返回，它返回一个None的对象，所以说Python的所有函数都是会返回某些东西的。有返回值就返回一个值，没有返回值就返回一个None对象。
#
# （2）再谈谈返回值
#
# 在我们许多编程语言里边，我们说一个函数时整型的函数，其实我们的意思是指这个函数会返回一个整型的返回值，而Python不这么干，Python是动态的确定类型，所以我们在Python的变量里边，没有说 int a，float b，double c，而是动态的确定类型，只有它赋值的时候，编译器自动确定需要什么类型。
#
# 对于返回值，也不用管是什么类型。Python是可以有多个返回值的，Python可以通过列表返回多个值。
#
#
#
# （3）函数变量的作用域（我的地盘听我的）
#
# 局部变量和全局变量
#
# 在函数里面定义的参数以及变量都称之为局部变量，除了这个函数，这些参数和变量都是
# 无效的（未定义），事实上的原理是：Python在运行这个函数的时候，是利用栈进行存储，
# 把这个函数需要的代码以及变量都扔进这个栈里，当执行完该函数时，
# 这个函数会被自动的删除，这个栈里的数据会被自动的清空，
# 那函数外是无法访问到内部的局部变量的。
#
# 在函数内部是可以访问全局变量的，但是如果在函数内部试图更改全局变量的值，
# Python会自动创建一个新的局部变量代替，名字和全局变量相同。
#
# 全局变量在整个代码段中都是可以被访问到的，但是不要试图在函数内部去修改它，
# 你可以在函数内部去访问它的值，但是不要去修改它，因为那样的话，
# Python会自动在函数内部新建一个名字一样的局部变量代替。
# ————————————————
# 版权声明：本文为CSDN博主「来自江南的你」的原创文章，遵循 CC 4.0 BY-SA
# 版权协议，转载请附上原文出处链接及本声明。
# 原文链接：https://blog.csdn.net/qq_41556318/article/details/84135685